spring:
  application:
    name: kafka-email-service

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:host.docker.internal:9092}
    consumer:
      group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:notification-group}
      auto-offset-reset: ${SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET:earliest}
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      properties:
        spring.json.trusted.packages: "*"

    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer

  jpa:
    generate-ddl: ${SPRING_JPA_GENERATE_DDL:true}
    show-sql: ${SPRING_JPA_SHOW_SQL:true}

  output:
    ansi:
      enabled: always

  mail:
    host: ${SPRING_MAIL_HOST:smtp.gmail.com}
    port: ${SPRING_MAIL_PORT:587}
    username: ${SPRING_MAIL_USERNAME:}
    password: ${SPRING_MAIL_PASSWORD:}
    properties:
      mail:
        smtp:
          auth: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH:true}
          starttls:
            enable: ${SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE:true}

logging:
  level:
    root: ${LOGGING_LEVEL_ROOT:INFO}
    org.apache.kafka: ${LOGGING_LEVEL_ORG_APACHE_KAFKA:INFO}
    org.springframework.kafka.listener: ${LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA_LISTENER:DEBUG}

server:
  port: ${SERVER_PORT:8000}

# Дополнительные настройки для Docker
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics
  endpoint:
    health:
      show-details: always