version: '3.8'

services:
  kafka-email-service:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: kafka-email-service
    ports:
      - "8000:8000"
    environment:
      # Kafka настройки
      SPRING_KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-host.docker.internal:9092}
      SPRING_KAFKA_CONSUMER_GROUP_ID: notification-group
      SPRING_KAFKA_CONSUMER_AUTO_OFFSET_RESET: earliest

      # Mail настройки - ОБЯЗАТЕЛЬНО ЗАПОЛНИТЕ!
      SPRING_MAIL_USERNAME: ${MAIL_USERNAME}
      SPRING_MAIL_PASSWORD: ${MAIL_PASSWORD}
      SPRING_MAIL_HOST: smtp.gmail.com
      SPRING_MAIL_PORT: 587
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_AUTH: true
      SPRING_MAIL_PROPERTIES_MAIL_SMTP_STARTTLS_ENABLE: true

      # Настройки приложения
      SPRING_APPLICATION_NAME: kafka-email-service
      SERVER_PORT: 8000

      # Профили Spring
      SPRING_PROFILES_ACTIVE: docker

      # Логирование
      LOGGING_LEVEL_ROOT: INFO
      LOGGING_LEVEL_ORG_APACHE_KAFKA: INFO
      LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_KAFKA_LISTENER: DEBUG

      # JPA настройки
      SPRING_JPA_GENERATE_DDL: true
      SPRING_JPA_SHOW_SQL: true

      # Java опции
      JAVA_OPTS: "-Xmx512m -Xms256m"

    # Подключение к внешней сети, если Kafka в другом compose
    networks:
      - default
      - kafka-network

    restart: unless-stopped

    # Зависимости - убедитесь, что Kafka доступна
    depends_on:
      - kafka-health-check

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Сервис для проверки доступности Kafka
  kafka-health-check:
    image: confluentinc/cp-kafka:7.5.1
    container_name: kafka-health-check
    command: >
      sh -c "
        echo 'Waiting for Kafka to be ready...' &&
        kafka-topics --bootstrap-server ${KAFKA_BOOTSTRAP_SERVERS:-host.docker.internal:9092} --list &&
        echo 'Kafka is ready!'
      "
    environment:
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS:-host.docker.internal:9092}
    networks:
      - kafka-network
    restart: "no"

networks:
  kafka-network:
    external: true
    # Если внешняя сеть не существует, создайте её:
    # docker network create kafka-network
  default:
    driver: bridge