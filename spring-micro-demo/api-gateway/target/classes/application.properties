# Порт сервиса

# Уникальный идентификатор приложения в системе (важно указывать в микросервисных приложениях)
spring.application.name=api-gateway

# URL сервера Eureka, куда клиент будет регистрироваться
eureka.client.service-url.defaultZone=http://localhost:8081/eureka

# Использование HTTP вместо HTTPS при регистрации и общении с Eureka
eureka.instance.non-secure-port-enabled=true
eureka.instance.secure-port-enabled=false

# Использовать IP-адрес при регистрации вместо hostname
eureka.instance.prefer-ip-address=true

# Включение Eureka Client (оставлять true, если требуется регистрация и использование Eureka)
eureka.client.enabled=true

# Шаблон вывода логов в консоль
logging.pattern.console=%C{1} [%-5level] %d{HH:mm:ss} - %msg%n

# Включение эндпоинтов actuator для проверки состояния сервиса
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=always

spring.cloud.gateway.discovery.locator.enabled=true
spring.cloud.gateway.discovery.locator.lower-case-service=true

# Включение логирования для отладки
logging.level.org.springframework.cloud.gateway=DEBUG
logging.level.io.github.resilience4j=DEBUG
logging.level.org.springframework.cloud.circuitbreaker=DEBUG

# Настройки Circuit Breaker для быстрого восстановления
resilience4j.circuitbreaker.instances.myCircuitBreaker.failure-rate-threshold=50
resilience4j.circuitbreaker.instances.myCircuitBreaker.wait-duration-in-open-state=3s
resilience4j.circuitbreaker.instances.myCircuitBreaker.sliding-window-size=2
resilience4j.circuitbreaker.instances.myCircuitBreaker.minimum-number-of-calls=1
resilience4j.circuitbreaker.instances.myCircuitBreaker.sliding-window-type=count_based
resilience4j.circuitbreaker.instances.myCircuitBreaker.permitted-number-of-calls-in-half-open-state=1
resilience4j.circuitbreaker.instances.myCircuitBreaker.automatic-transition-from-open-to-half-open-enabled=true
resilience4j.circuitbreaker.instances.myCircuitBreaker.max-wait-duration-in-half-open-state=1s

# Настройки TimeLimiter - уменьшаем таймаут для быстрого срабатывания
resilience4j.timelimiter.instances.myCircuitBreaker.timeout-duration=2s

# Настройки Eureka для более быстрого обнаружения изменений
eureka.client.registry-fetch-interval-seconds=5
eureka.instance.lease-renewal-interval-in-seconds=5
eureka.instance.lease-expiration-duration-in-seconds=10

# ================================
# МАРШРУТЫ
# ================================

# Маршрут для тестирования
spring.cloud.gateway.routes[0].id=test
spring.cloud.gateway.routes[0].uri=lb://eclient
spring.cloud.gateway.routes[0].predicates[0]=Path=/main/test
spring.cloud.gateway.routes[0].predicates[1]=Method=GET
spring.cloud.gateway.routes[0].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[0].filters[0].args.fallbackUri=forward:/fallback

# Route for GET /api/users and /api/users/{id}
spring.cloud.gateway.routes[1].id=user-service-get-users
spring.cloud.gateway.routes[1].uri=lb://user-service
spring.cloud.gateway.routes[1].predicates[0]=Path=/api/users/**
spring.cloud.gateway.routes[1].predicates[1]=Method=GET
spring.cloud.gateway.routes[1].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[1].filters[0].args.fallbackUri=forward:/fallback

# Route for POST /api/users
spring.cloud.gateway.routes[2].id=user-service-post-users
spring.cloud.gateway.routes[2].uri=lb://user-service
spring.cloud.gateway.routes[2].predicates[0]=Path=/api/users
spring.cloud.gateway.routes[2].predicates[1]=Method=POST
spring.cloud.gateway.routes[2].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[2].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[2].filters[0].args.fallbackUri=forward:/fallback

# Route for PUT /api/users/{id}
spring.cloud.gateway.routes[3].id=user-service-put-users
spring.cloud.gateway.routes[3].uri=lb://user-service
spring.cloud.gateway.routes[3].predicates[0]=Path=/api/users/**
spring.cloud.gateway.routes[3].predicates[1]=Method=PUT
spring.cloud.gateway.routes[3].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[3].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[3].filters[0].args.fallbackUri=forward:/fallback

# Route for DELETE /api/users/{id}
spring.cloud.gateway.routes[4].id=user-service-delete-users
spring.cloud.gateway.routes[4].uri=lb://user-service
spring.cloud.gateway.routes[4].predicates[0]=Path=/api/users/**
spring.cloud.gateway.routes[4].predicates[1]=Method=DELETE
spring.cloud.gateway.routes[4].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[4].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[4].filters[0].args.fallbackUri=forward:/fallback

# ================================
# Маршрут с Circuit Breaker для /api/hello
spring.cloud.gateway.routes[5].id=user-service-hello
spring.cloud.gateway.routes[5].uri=lb://user-service
spring.cloud.gateway.routes[5].predicates[0]=Path=/api/hello
spring.cloud.gateway.routes[5].predicates[1]=Method=GET
spring.cloud.gateway.routes[5].filters[0].name=CircuitBreaker
spring.cloud.gateway.routes[5].filters[0].args.name=myCircuitBreaker
spring.cloud.gateway.routes[5].filters[0].args.fallbackUri=forward:/fallback